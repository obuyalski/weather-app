{"version":3,"sources":["serviceWorker.js","actions/weatherAction.js","reducers/index.js","components/CityPin.jsx","styles/map-style.js","components/WeatherDisplay.jsx","App.js","index.js"],"names":["Boolean","window","location","hostname","match","watchFetchWeather","fetchWeatherAsync","WEATHER_KEY","requestWeather","createReducer","loading","error","description","weatherForecast","createAction","requestWeatherSuccess","fetchWeather","requestWeatherError","regenerator_default","a","wrap","_context","prev","next","takeEvery","getType","stop","_marked","this","_ref","data","_context2","store","getState","sent","put","call","fetch","concat","then","res","json","t0","_marked2","reducer","on","state","Object","objectSpread","action","pinStyle","cursor","fill","stroke","CityPin","_this$props","props","_this$props$size","size","onClick","react_default","createElement","height","viewBox","style","transform","d","PureComponent","defaultMapStyle","fromJS","id","source","type","paint","circle-radius","circle-color","MAP_STYLE","WeatherDisplay","_this","classCallCheck","possibleConstructorReturn","getPrototypeOf","showWeather","event","target","setState","_this2","formatter","Intl","DateTimeFormat","month","day","weather","date","cod","format","Date","list","dt_txt","split","className","react_icons_weather_lib_default","name","iconId","flip","rotate","fontSize","color","main","temp","toFixed","role","e","temp_max","temp_min","wind","speed","Component","connect","App","updateViewport","viewport","resize","width","innerWidth","innerHeight","onViewportChange","onSuggestSelect","suggest","getWeather","zoom","latitude","lat","longitude","lng","latCity","longCity","mapStyle","_this$state","Geosuggest_esm","placeholder","google","maps","LatLng","radius","components_WeatherDisplay","esm","assign","mapboxApiAccessToken","textAlign","key","CityPin_CityPin","addEventListener","dispatch","__webpack_require__","__webpack_exports__","sagaMiddleware","createSagaMiddleware","createStore","applyMiddleware","run","ConnectedApp","ReactDOM","render","es","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.b1f4b28c.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import { createAction } from 'redux-act';\r\nimport { takeEvery, put, call } from 'redux-saga/effects';\r\nimport { createReducer } from 'redux-act';\r\nimport {store} from '../index';\r\n\r\nconst WEATHER_KEY = \"abfeb1f7e3de9fa66f370719f0bbc0c2\";\r\n\r\nconst initialState = {\r\n  loading: false,\r\n  error: false,\r\n  description: '',\r\n  weatherForecast: {}\r\n};\r\n\r\nconst reducer = createReducer({}, initialState);\r\n\r\nexport const requestWeather = createAction('REQUESTED_WEATHER');\r\nexport const requestWeatherSuccess = createAction('REQUESTED_WEATHER_SUCCEEDED');\r\nexport const fetchWeather = createAction('FETCHED_WEATHER');\r\nexport const requestWeatherError = createAction('REQUESTED_WEATHER_FAILED');\r\n\r\nexport function* watchFetchWeather() {\r\n  yield takeEvery(fetchWeather.getType(), fetchWeatherAsync);\r\n}\r\n\r\nexport function* fetchWeatherAsync() {\r\n  try {\r\n    const {description} = yield store.getState();\r\n    yield put(requestWeather());\r\n    const data = yield call(() => {\r\n      return fetch(`http://api.openweathermap.org/data/2.5/forecast?q=${description}&APPID=${WEATHER_KEY}&units=metric`)\r\n        .then(res => res.json())\r\n    }\r\n    );\r\n    yield put(requestWeatherSuccess(data));\r\n  } catch (error) {\r\n    yield put(requestWeatherError());\r\n  }\r\n}\r\n\r\nexport default reducer;","import { createReducer } from 'redux-act';\r\nimport {requestWeather, requestWeatherSuccess, fetchWeather, requestWeatherError} from '../actions/weatherAction';\r\n\r\nconst initialState = {\r\n  loading: false,\r\n  error: false,\r\n  description: '',\r\n  weatherForecast: {}\r\n};\r\n\r\nconst reducer = createReducer({}, initialState);\r\n\r\nreducer.on(requestWeather, (state) => ({\r\n  ...state,\r\n  loading: true,\r\n  error: false,\r\n}));\r\n\r\nreducer.on(requestWeatherSuccess, (state, action) => ({\r\n  ...state,\r\n  weatherForecast: action,\r\n  loading: false,\r\n  error: false,\r\n}));\r\n\r\nreducer.on(fetchWeather, (state, action) => ({\r\n  ...state, \r\n  description: action \r\n}));\r\n\r\nreducer.on(requestWeatherError, (state) => ({\r\n  ...state,\r\n  loading: false,\r\n  error: true,\r\n}));\r\n\r\nexport default reducer;","import React, {PureComponent} from 'react';\r\n\r\nconst ICON = `M20.2,15.7L20.2,15.7c1.1-1.6,1.8-3.6,1.8-5.7c0-5.6-4.5-10-10-10S2,4.5,2,10c0,2,0.6,3.9,1.6,5.4c0,0.1,0.1,0.2,0.2,0.3\r\n  c0,0,0.1,0.1,0.1,0.2c0.2,0.3,0.4,0.6,0.7,0.9c2.6,3.1,7.4,7.6,7.4,7.6s4.8-4.5,7.4-7.5c0.2-0.3,0.5-0.6,0.7-0.9\r\n  C20.1,15.8,20.2,15.8,20.2,15.7z`;\r\n\r\nconst pinStyle = {\r\n  cursor: 'pointer',\r\n  fill: '#d00',\r\n  stroke: 'none'\r\n};\r\n\r\nexport default class CityPin extends PureComponent {\r\n\r\n  render() {\r\n    const {size = 20, onClick} = this.props;\r\n\r\n    return (\r\n      <svg height={size} viewBox='0 0 24 24'\r\n        style={{...pinStyle, transform: `translate(${-size/2}px,${-size}px)`}}\r\n        onClick={onClick} >\r\n        <path d={ICON}/>\r\n      </svg>\r\n    );\r\n  }\r\n}","import {fromJS} from 'immutable';\r\nimport MAP_STYLE from '../map-style-basic-v8.json';\r\n\r\nexport const pointLayer = fromJS({\r\n  id: 'point',\r\n  source: 'point',\r\n  type: 'circle',\r\n  paint: {\r\n    'circle-radius': 10,\r\n    'circle-color': '#007cbf'\r\n  }\r\n});\r\n\r\nexport const defaultMapStyle = fromJS(MAP_STYLE);","import React, { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport WeatherIcon from 'react-icons-weather';\r\n\r\nclass WeatherDisplay extends Component {\r\n    constructor() {\r\n        super();\r\n\r\n        this.state = {\r\n            id: 0\r\n        }\r\n    }\r\n\r\n    render() {\r\n        const formatter = new Intl.DateTimeFormat(\"ru\", { month: \"long\", day: \"numeric\" });\r\n        const {weather, description} = this.props;\r\n        const { id } = this.state;\r\n        let date = null;\r\n        \r\n        if(weather.cod === \"200\")\r\n        date = formatter.format(new Date(weather.list[id].dt_txt.split(\" \")[0]));\r\n\r\n        return weather.cod === \"200\" ?\r\n            (<div className=\"weather-card\">\r\n                <div className=\"weather-card__content\">\r\n                    <div className=\"weather-card__header\">\r\n                        <WeatherIcon \r\n                        name=\"owm\" \r\n                        iconId={`${weather.list[id].weather[0].id}`} \r\n                        flip=\"horizontal\" \r\n                        rotate=\"90\" \r\n                        style={{ fontSize: '70px', color: \"black\" }} \r\n                        />\r\n                        <div>\r\n                            <span className=\"weather-card__temperature\">{weather.list[id].main.temp.toFixed()}&deg;C</span>\r\n                            <span className=\"weather-card__description\">{date}\r\n                            </span>\r\n                            <span className=\"weather-card__location\">{description}</span>\r\n                        </div>\r\n                    </div>\r\n                    <nav className=\"weather-card__navigation\" role='navigation'>\r\n                        <ul className=\"weather-card__button\" onClick={(e) => this.showWeather(e)}>\r\n                            <li><button className=\"btn\" id={0}>Сегодня</button></li>\r\n                            <li><button className=\"btn\" id={9}>Завтра</button></li>\r\n                            <li><button className=\"btn\" id={17}>Послезавтра</button></li>\r\n                        </ul>\r\n                    </nav>\r\n\r\n                    <table className=\"weather-card__forcast\">\r\n                    <tbody>\r\n                        <tr>\r\n                            <td>Макс. температура</td>\r\n                            <td>{weather.list[id].main.temp_max.toFixed()}&deg;C</td>\r\n                        </tr>\r\n\r\n                        <tr>\r\n                            <td>Мин. температура</td>\r\n                            <td>{weather.list[id].main.temp_min.toFixed()}&deg;C</td>\r\n                        </tr>\r\n                        <tr>\r\n                            <td>Скорость ветра</td>\r\n                            <td>{weather.list[id].wind.speed} км/ч</td>\r\n                        </tr>\r\n                        </tbody>\r\n                    </table>\r\n                </div>\r\n            </div>\r\n            ) : null;\r\n    }\r\n\r\n    showWeather = event => {\r\n        if(event.target.id)\r\n        this.setState({\r\n            id: event.target.id\r\n        });\r\n    }\r\n}\r\n\r\nconst mapStateToProps = store => {\r\n    return {\r\n        weather: store.weatherForecast,\r\n        description: store.description\r\n    }\r\n  }\r\n  \r\n  export default connect(\r\n    mapStateToProps\r\n  )(WeatherDisplay);","import React, { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport MapGL, { Marker } from 'react-map-gl';\r\nimport Geosuggest from 'react-geosuggest';\r\nimport CityPin from './components/CityPin';\r\nimport {defaultMapStyle} from './styles/map-style.js';\r\nimport WeatherDisplay from './components/WeatherDisplay';\r\nimport { fetchWeather } from './actions/weatherAction';\r\nimport './styles/App.css';\r\nimport './styles/geosuggest.css';\r\n\r\nconst TOKEN = \"pk.eyJ1IjoiemlkYWJhaCIsImEiOiJjam51ZjE3N2QwM3VqM3dudnl5dXoyb213In0.wPZNMnjjPWu6zN4aHPjg2w\";\r\n\r\nclass App extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      mapStyle: defaultMapStyle,\r\n      viewport: {\r\n        width: window.innerWidth,\r\n        height: window.innerHeight,\r\n        latitude: 37.7577,\r\n        longitude: -122.4376,\r\n        zoom: 8\r\n      }\r\n    };\r\n  }\r\n\r\n  render() {\r\n    const { viewport, latCity, longCity, mapStyle } = this.state;\r\n\r\n    return (\r\n      <div className=\"App\">\r\n        <div className=\"fixed-search\">\r\n          <Geosuggest\r\n            placeholder=\"Поиск на карте\"\r\n            onViewportChange={this.updateViewport}\r\n            onSuggestSelect={this.onSuggestSelect}\r\n            location={new window.google.maps.LatLng(53.558572, 9.9278215)}\r\n            radius={20} />\r\n          <WeatherDisplay />\r\n        </div>\r\n        <MapGL\r\n          {...viewport}\r\n          mapStyle={mapStyle}\r\n          mapboxApiAccessToken={TOKEN}\r\n          onViewportChange={(viewport) => this.onViewportChange(viewport)}\r\n          style={{ textAlign: 'left' }}\r\n        >\r\n        {latCity && longCity &&\r\n          <Marker\r\n            latitude={latCity}\r\n            longitude={longCity}\r\n            key=\"marker\"\r\n          >\r\n            <CityPin size={20} />\r\n          </Marker>\r\n        }\r\n        </MapGL>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  updateViewport = (viewport) => {\r\n    this.setState({ viewport });\r\n  }\r\n\r\n  componentDidMount() {\r\n    window.addEventListener('resize', this.resize);\r\n    this.resize();\r\n  }\r\n\r\n  resize = () => {\r\n    this.setState({\r\n      viewport: {\r\n        ...this.state.viewport,\r\n        width: this.props.width || window.innerWidth,\r\n        height: this.props.height || window.innerHeight\r\n      }\r\n    });\r\n  };\r\n\r\n  onViewportChange = (viewport) => {\r\n    this.setState({\r\n      viewport: {\r\n        ...viewport\r\n      }\r\n    })\r\n  };\r\n\r\n  onSuggestSelect = (suggest) => {\r\n    if (suggest) {\r\n      const { description, location } = suggest;\r\n\r\n      this.getWeather(description);\r\n      this.setState({\r\n          viewport: {\r\n            ...this.state.viewport,\r\n            zoom: 12,\r\n            latitude: location.lat,\r\n            longitude: location.lng,\r\n          },\r\n          latCity: location.lat,\r\n          longCity: location.lng\r\n      });\r\n    }\r\n  }\r\n  \r\n  getWeather = (description) => {\r\n    this.props.fetchWeather(description);\r\n  }\r\n\r\n}\r\n\r\nconst mapStateToProps = store => {\r\n  return {\r\n    store: store\r\n  }\r\n}\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n  return {\r\n    fetchWeather: description => dispatch(fetchWeather(description))\r\n  }\r\n}\r\n\r\nexport default connect(\r\n  mapStateToProps,\r\n  mapDispatchToProps\r\n)(App);","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport { Provider, connect } from 'react-redux';\r\nimport {createStore, applyMiddleware} from 'redux';\r\nimport createSagaMiddleware from 'redux-saga';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport { watchFetchWeather } from './actions/weatherAction';\r\nimport reducer from './reducers/index';\r\nimport App from './App';\r\nimport './styles/index.css';\r\nimport './styles/card.css';\r\n\r\nconst sagaMiddleware = createSagaMiddleware();\r\nexport const store = createStore(\r\n    reducer,\r\n    applyMiddleware(sagaMiddleware)\r\n  );\r\n  sagaMiddleware.run(watchFetchWeather);\r\n\r\n  const ConnectedApp = connect((state) => {\r\n    return state;\r\n  })(App);\r\n\r\nReactDOM.render(<Provider store={store}><ConnectedApp /></Provider>, document.getElementById('root'));\r\nserviceWorker.unregister();"],"sourceRoot":""}